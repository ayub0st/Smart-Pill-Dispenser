#include <Wire.h>
#include "RTClib.h"
#include <LiquidCrystal.h>

// ====================================================================
// üü¢ ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏á‡∏à‡∏£
// --------------------------------------------------------------------
// LCD Keypad Shield : ‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï D8, D9, D4, D5, D6, D7 ‡∏ö‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î
// RTC DS3231        : SDA -> A4, SCL -> A5, VCC -> 5V, GND -> GND
//
// LED ‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤ (3 ‡∏î‡∏ß‡∏á): 
//   - LED1 (‡∏¢‡∏≤‡πÄ‡∏ä‡πâ‡∏≤) -> D2 ‡∏ú‡πà‡∏≤‡∏ô R220Œ© -> LED -> GND
//   - LED2 (‡∏¢‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô) -> D3 ‡∏ú‡πà‡∏≤‡∏ô R220Œ© -> LED -> GND
//   - LED3 (‡∏¢‡∏≤‡πÄ‡∏¢‡πá‡∏ô) -> D11 ‡∏ú‡πà‡∏≤‡∏ô R220Œ© -> LED -> GND
//
// ‡πÇ‡∏ã‡∏•‡∏¥‡∏ô‡∏≠‡∏¢‡∏î‡πå (3 ‡∏ä‡πà‡∏≠‡∏á, ‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏• Delay Relay/Transistor):
//   - Solenoid1 -> D12 -> IN ‡πÇ‡∏°‡∏î‡∏π‡∏• -> OUT -> Solenoid1+ (Solenoid1- -> GND)
//   - Solenoid2 -> D13 -> IN ‡πÇ‡∏°‡∏î‡∏π‡∏• -> OUT -> Solenoid2+ (Solenoid2- -> GND)
//   - Solenoid3 -> A1  -> IN ‡πÇ‡∏°‡∏î‡∏π‡∏• -> OUT -> Solenoid3+ (Solenoid3- -> GND)
//
// Buzzer Active 3 ‡∏Ç‡∏≤ (‡∏°‡∏µ VCC, GND, SIG):
//   - VCC -> 5V
//   - GND -> GND
//   - SIG -> D10
//
// ‡∏õ‡∏∏‡πà‡∏° SELECT ‡∏à‡∏≤‡∏Å LCD Shield ‡πÉ‡∏ä‡πâ A0
// ====================================================================

// ---------- RTC ----------
RTC_DS3231 rtc;

// ---------- LCD Shield ----------
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// ---------- Pin Setup ----------
const int ledPins[3]      = {2, 3, 11};     // LED ‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤
const int solenoidPins[3] = {12, 13, A1};   // Solenoid Lock
const int buzzerPin       = 10;             // Buzzer Active 3 ‡∏Ç‡∏≤
const int buttonPin       = A0;             // ‡∏õ‡∏∏‡πà‡∏° SELECT

// ---------- ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡∏Å‡∏¢‡∏≤ ----------
int pillHours[3]   = {8, 12, 16};  // ‡πÄ‡∏ß‡∏•‡∏≤ 08:00, 12:00, 16:00
int pillMinutes[3] = {0, 0, 0};    // ‡∏ô‡∏≤‡∏ó‡∏µ = 00

// ---------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ----------
bool hasDispensed[3] = {false, false, false};  // ‡∏Å‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô

// ====================================================================
// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Buzzer Active
// --------------------------------------------------------------------
// Active buzzer ‡πÅ‡∏Ñ‡πà‡∏à‡πà‡∏≤‡∏¢ HIGH ‡∏Å‡πá‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
// ‡πÉ‡∏ä‡πâ beepActive(ms) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏µ‡πä‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// ====================================================================
void beepActive(unsigned ms) {
  digitalWrite(buzzerPin, HIGH); // ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏ü -> ‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  delay(ms);                     // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏µ‡πä‡∏ö
  digitalWrite(buzzerPin, LOW);  // ‡∏ï‡∏±‡∏î‡πÑ‡∏ü -> ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
}

/*
----------------------------------------
üìå ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á:

1) ‡∏ö‡∏µ‡πä‡∏ö 2 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞:
   beepActive(200);
   delay(100);
   beepActive(200);

2) ‡∏ö‡∏µ‡πä‡∏ö‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô:
   beepActive(500);  // 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

3) ‡∏ö‡∏µ‡πä‡∏ö‡∏™‡∏±‡πâ‡∏ô:
   beepActive(100);  // 0.1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

4) ‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞:
   beepActive(100);
   delay(50);
   beepActive(100);
   delay(50);
   beepActive(100);
----------------------------------------
*/

// ====================================================================
// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô LCD
// ====================================================================
void showTime(int h, int m, int s) {
  lcd.setCursor(0, 0);
  lcd.print("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤      "); 
  lcd.setCursor(0, 1);
  if (h < 10) lcd.print('0'); lcd.print(h); lcd.print(':');
  if (m < 10) lcd.print('0'); lcd.print(m); lcd.print(':');
  if (s < 10) lcd.print('0'); lcd.print(s);
  lcd.print("   ");
}

// ====================================================================
// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤
// ====================================================================
void dispensePill(int channel) {
  Serial.print(">> ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà "); Serial.println(channel + 1);

  lcd.clear();
  lcd.print("‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ ‡∏ä‡πà‡∏≠‡∏á ");
  lcd.print(channel + 1);

  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ã‡∏•‡∏¥‡∏ô‡∏≠‡∏¢‡∏î‡πå 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ + ‡∏ö‡∏µ‡πä‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  digitalWrite(solenoidPins[channel], HIGH);
  beepActive(300);    // ‡∏ö‡∏µ‡πä‡∏ö‡∏™‡∏±‡πâ‡∏ô 0.3 ‡∏ß‡∏¥
  delay(4700);        // ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥
  digitalWrite(solenoidPins[channel], LOW);

  // ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô
  digitalWrite(ledPins[channel], LOW);

  lcd.clear();
  lcd.print("‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ‡∏î‡∏±‡∏ö‡πÑ‡∏ü");
  lcd.setCursor(0, 1);
  lcd.print("‡∏ä‡πà‡∏≠‡∏á ");
  lcd.print(channel + 1);
}

// ====================================================================
// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á (‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏≤‡∏á 10 ‡∏ß‡∏¥)
// ====================================================================
void unlockAll() {
  Serial.println(">> ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á (‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á 10 ‡∏ß‡∏¥)");
  lcd.clear(); lcd.print("‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");

  for (int i = 0; i < 3; i++) digitalWrite(solenoidPins[i], HIGH);
  digitalWrite(buzzerPin, HIGH);  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡πâ‡∏≤‡∏á
  delay(5000);
  digitalWrite(buzzerPin, LOW);
  for (int i = 0; i < 3; i++) digitalWrite(solenoidPins[i], LOW);

  lcd.clear(); lcd.print("‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠");
}

// ====================================================================
// üü¢ Setup
// ====================================================================
void setup() {
  Serial.begin(9600);
  delay(2000);

  if (!rtc.begin()) {
    Serial.println("‡πÑ‡∏°‡πà‡∏û‡∏ö RTC!");
    while (1);
  }
  // rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  for (int i = 0; i < 3; i++) {
    pinMode(ledPins[i], OUTPUT);
    pinMode(solenoidPins[i], OUTPUT);
    digitalWrite(solenoidPins[i], LOW);
    digitalWrite(ledPins[i], HIGH);   // ‡πÑ‡∏ü‡∏ï‡∏¥‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);

  lcd.begin(16, 2);
  lcd.clear();
  lcd.print("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤");

  Serial.println("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
}

// ====================================================================
// üü¢ Loop
// ====================================================================
void loop() {
  DateTime now = rtc.now();
  int hourTH = (now.hour() + 7) % 24; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
  int minute = now.minute();
  int second = now.second();

  showTime(hourTH, minute, second);

  // Debug Serial
  Serial.print("‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ");
  Serial.print(hourTH); Serial.print(':');
  Serial.print(minute); Serial.print(':');
  Serial.println(second);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡∏Å‡∏¢‡∏≤
  for (int i = 0; i < 3; i++) {
    if (hourTH == pillHours[i] && minute == pillMinutes[i] && !hasDispensed[i]) {
      dispensePill(i);
      hasDispensed[i] = true;
    }
  }

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≠‡∏ô 00:00:00
  if (hourTH == 0 && minute == 0 && second == 0) {
    for (int i = 0; i < 3; i++) {
      hasDispensed[i] = false;
      digitalWrite(ledPins[i], HIGH); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏¥‡∏î
    }
    Serial.println(">> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô + ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏≤‡∏á 10 ‡∏ß‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á
  if (analogRead(buttonPin) < 100) {  // SELECT
    unsigned long pressTime = millis();
    while (analogRead(buttonPin) < 100) {
      if (millis() - pressTime > 10000) {
        unlockAll();
        break;
      }
    }
  }

  delay(200);
}